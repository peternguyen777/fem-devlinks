/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-floating-promises */
/* eslint-disable @typescript-eslint/no-misused-promises */
import { useSignIn, useUser } from "@clerk/nextjs";
import { zodResolver } from "@hookform/resolvers/zod";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState } from "react";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { Spinner } from "~/components/icons/spinner";
import { Button } from "~/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "~/components/ui/form";
import { Input } from "~/components/ui/input";

const formSchema = z.object({
  username: z.string().email({ message: "Invalid email" }),
  password: z.string().min(1, { message: "Required" }),
});

export default function SignIn() {
  const { isSignedIn } = useUser();
  const { isLoaded, signIn, setActive } = useSignIn();
  const router = useRouter();

  const [error, setError] = useState<string | undefined>(undefined);
  const [isSigningIn, setIsSigningIn] = useState<boolean>(false);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: "",
      password: "",
    },
  });

  if (isSignedIn) {
    router.push("/");
  }

  if (!isLoaded) {
    return null;
  }

  async function onSubmit(values: z.infer<typeof formSchema>) {
    if (signIn) {
      setIsSigningIn(true);
      await signIn
        .create({
          identifier: values.username,
          password: values.password,
        })
        .then((result) => {
          if (result.status === "complete") {
            setActive({ session: result.createdSessionId });
            setError(undefined);
            router.push("/");
          }
        })
        .catch((err) => {
          console.error("error", err.errors[0].longMessage);
          setError(err.errors[0].longMessage);
        })
        .finally(() => {
          setIsSigningIn(false);
        });
    }
  }

  return (
    <>
      <Head>
        <title>DevLinks - Signin</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="p-8">
        <Image
          src="/images/logo-devlinks-large.svg"
          alt="devlinks logo"
          width={183}
          height={40}
          className="cursor-pointer"
          onClick={() => router.push("/")}
        />
        <h3 className="mt-16">Login</h3>
        <p className="mt-2 text-[#737373]">
          Add your details below to get back into the app
        </p>
        <Form {...form}>
          <form
            onSubmit={form.handleSubmit(onSubmit)}
            className="mt-10 space-y-6"
          >
            <FormField
              control={form.control}
              name="username"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email Address</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="e.g. alex@email.com"
                      {...field}
                      icon={
                        <Image
                          src="/images/icon-email.svg"
                          alt="password icon"
                          height={16}
                          width={16}
                        />
                      }
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>
                    <h6>Password</h6>
                  </FormLabel>
                  <FormControl>
                    <Input
                      placeholder="Enter your password"
                      {...field}
                      type="password"
                      autoComplete="on"
                      icon={
                        <Image
                          src="/images/icon-password.svg"
                          alt="password icon"
                          height={16}
                          width={16}
                        />
                      }
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="flex flex-col items-center">
              {error && (
                <h6 className="text-destructive mb-2 w-full">{error}</h6>
              )}
              <Button
                type="submit"
                disabled={isSigningIn}
                className="font-instrument w-full items-start bg-[#633CFF] text-[16px] font-semibold leading-[24px] text-white hover:bg-[#BEADFF]"
              >
                {isSigningIn && <Spinner />}
                Submit
              </Button>
              <h5 className="mt-6 text-[#737373]">
                Don&apos;t have an account?
              </h5>
              <Link href="/sign-up">
                <h5 className="text-[#633CFF]">Create account</h5>
              </Link>
            </div>
          </form>
        </Form>
      </main>
    </>
  );
}
